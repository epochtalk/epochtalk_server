name: CI test and build

on:
  push:
  pull_request:
    types: [opened]
    branches:
      - main

jobs:
  dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3.6.0
        with:
          ref: ${{ github.event.client_payload.branch }}
      - name: Parse .tool-versions
        id: tool-versions
        uses: paulo-ferraz-oliveira/parse-tool-versions@v1
      - name: Sets up an Erlang/OTP environment
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict
      - name: Retrieve cached dependencies
        uses: actions/cache@v3.3.1
        id: mix-cache
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-${{ steps.tool-versions.outputs.erlang }}-${{ steps.tool-versions.outputs.elixir }}-${{ hashFiles('mix.lock') }}
      - name: Install dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
          mix deps.compile
  static-code-analysis:
    needs: dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3.6.0
        with:
          ref: ${{ github.event.client_payload.branch }}
      - name: Parse .tool-versions
        id: tool-versions
        uses: paulo-ferraz-oliveira/parse-tool-versions@v1
      - name: Sets up an Erlang/OTP environment
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict
      - name: Retrieve cached dependencies
        uses: actions/cache@v3.3.1
        id: mix-cache
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-${{ steps.tool-versions.outputs.erlang }}-${{ steps.tool-versions.outputs.elixir }}-${{ hashFiles('mix.lock') }}
      - run: mix format --check-formatted
      - run: mix credo || ret=$?; if [ $ret != 2 ]; then exit $ret; fi
      # PLT cache for dialyzer
      # Don't cache PLTs based on mix.lock hash, as Dialyzer can incrementally update even old ones
      # Cache key based on Elixir & Erlang version (also useful when running in matrix)
      - name: Restore PLT cache
        uses: actions/cache/restore@v3
        id: plt_cache
        with:
          key: |
            ${{ runner.os }}-${{ steps.tool-versions.outputs.erlang }}-${{ steps.tool-versions.outputs.elixir }}-plt
          restore-keys: |
            ${{ runner.os }}-${{ steps.tool-versions.outputs.erlang }}-${{ steps.tool-versions.outputs.elixir }}-plt
          path: |
            priv/plts
      # Create PLTs if no cache was found
      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt
      # By default, the GitHub Cache action will only save the cache if all steps in the job succeed,
      # so we separate the cache restore and save steps in case running dialyzer fails.
      - name: Save PLT cache
        uses: actions/cache/save@v3
        if: steps.plt_cache.outputs.cache-hit != 'true'
        id: plt_cache_save
        with:
          key: |
            ${{ runner.os }}-${{ steps.tool-versions.outputs.erlang }}-${{ steps.tool-versions.outputs.elixir }}-plt
          path: |
            priv/plts
      - name: Run dialyzer
        run: mix dialyzer --format github
  test_job:
    needs: dependencies
    name: Run tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: epochtalk_server_test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        ports:
          - 6379:6379
        image: redis:7.0.4
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3.6.0
        with:
          ref: ${{ github.event.client_payload.branch }}
      - name: Parse .tool-versions
        id: tool-versions
        uses: paulo-ferraz-oliveira/parse-tool-versions@v1
      - name: Sets up an Erlang/OTP environment
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict
      - name: Retrieve cached dependencies
        uses: actions/cache@v3.3.1
        id: mix-cache
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-${{ steps.tool-versions.outputs.erlang }}-${{ steps.tool-versions.outputs.elixir }}-${{ hashFiles('mix.lock') }}
      - name: Run tests
        run: mix test
  # pre_release_job:
  #   needs: test_job
  #   name: Pre-Release
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3.6.0
  #     - name: Semantic Release
  #       uses: cycjimmy/semantic-release-action@v4.0.0
  #       with:
  #         dry_run: true
  #         branches: |
  #           [
  #             'github-actions'
  #           ]
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  release_job:
    needs: test_job
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.6.0
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4.0.0
        with:
          branches: |
            [
              'main'
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  generateDocs:
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/github-actions' }}
    name: Generate project documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.6.0
      - name: Sets up an Erlang/OTP environment
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict
      - name: Build docs
        uses: lee-dohm/generate-elixir-docs@v1.0.1
      - name: Publish to Pages
        uses: peaceiris/actions-gh-pages@v3.9.3
        with:
          deploy_key: ${{ secrets.DOCS_DEPLOY_KEY }}
          external_repository: epochtalk/server.epochtalk.github.io
          publish_dir: ./doc
          publish_branch: gh-pages
