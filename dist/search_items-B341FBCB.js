searchNodes=[{"doc":"EpochtalkServer keeps the contexts that define your domain and business logic. Contexts are also responsible for managing your data, regardless if it comes from the database, an external API or others.","ref":"EpochtalkServer.html","title":"EpochtalkServer","type":"module"},{"doc":"Guardian provides a singular interface for authentication in Elixir applications that is token based. Tokens should be: tamper proof include a payload (claims) JWT tokens (the default) fit this description. When using Guardian, you'll need an implementation module. defmodule MyApp.Guardian do use Guardian , otp_app : :my_app def subject_for_token ( resource , _claims ) , do : { :ok , to_string ( resource . id ) } def resource_from_claims ( claims ) do find_me_a_resource ( claims [ &quot;sub&quot; ] ) # {:ok, resource} or {:error, reason} end end This module is what you will use to interact with tokens in your application. When you use Guardian, the :otp_app option is required. Any other option provided will be merged with the configuration in the config files. The Guardian module contains some generated functions and some callbacks. Generated functions default_token_type() Overridable. Provides the default token type for the token - &quot;access&quot; Token types allow a developer to mark a token as having a particular purpose. Different types of tokens can then be used specifically in your app. Types may include (but are not limited to): &quot;access&quot; &quot;refresh&quot; Access tokens should be short lived and are used to access resources on your API. Refresh tokens should be longer lived and whose only purpose is to exchange for a shorter lived access token. To specify the type of token, use the :token_type option in the encode_and_sign function. Token type is encoded into the token in the &quot;typ&quot; field. Return - a string. peek(token) Inspect a tokens payload. Note that this function does no verification. Return - a map including the :claims key. config() , config(key, default \\\\ nil) Without argument config will return the full configuration Keyword list. When given a key and optionally a default, config will fetch a resolved value contained in the key. See Guardian.Config.resolve_value/1 encode_and_sign(resource, claims \\\\ %{}, opts \\\\ []) Creates a signed token. Arguments: resource - The resource to represent in the token (i.e. the user) claims - Any custom claims that you want to use in your token opts - Options for the token module and callbacks For more information on options see the documentation for your token module. # Provide a token using the defaults including the default_token_type { :ok , token , full_claims } = MyApp.Guardian . encode_and_sign ( user ) # Provide a token including custom claims { :ok , token , full_claims } = MyApp.Guardian . encode_and_sign ( user , %{ some : &quot;claim&quot; } ) # Provide a token including custom claims and a different token type/ttl { :ok , token , full_claims } = MyApp.Guardian . encode_and_sign ( user , %{ some : &quot;claim&quot; } , token_type : &quot;refresh&quot; , ttl : { 4 , :weeks } ) The encode_and_sign function calls a number of callbacks on your implementation module. See Guardian.encode_and_sign/4 decode_and_verify(token, claims_to_check \\\\ %{}, opts \\\\ []) Decodes a token and verifies the claims are valid. Arguments: token - The token to decode claims_to_check - A map of the literal claims that should be matched. If any of the claims do not literally match verification fails. opts - The options to pass to the token module and callbacks Callbacks: decode_and_verify calls a number of callbacks on your implementation module, See Guardian.decode_and_verify/4 # Decode and verify using the defaults { :ok , claims } = MyApp.Guardian . decode_and_verify ( token ) # Decode and verify with literal claims check. # If the claims in the token do not match those given verification will fail { :ok , claims } = MyApp.Guardian . decode_and_verify ( token , %{ match : &quot;claim&quot; } ) # Decode and verify with literal claims check and options. # Options are passed to your token module and callbacks { :ok , claims } = MyApp.Guardian . decode_and_verify ( token , %{ match : &quot;claim&quot; } , some : &quot;secret&quot; ) revoke(token, opts \\\\ []) Revoke a token. Note: this is entirely dependent on your token module and implementation callbacks. { :ok , claims } = MyApp.Guardian . revoke ( token , some : &quot;option&quot; ) refresh(token, opts \\ []) Refreshes the time on a token. This is used to re-issue a token with essentially the same claims but with a different expiry. Tokens are verified before performing the refresh to ensure only valid tokens may be refreshed. Arguments: token - The old token to refresh opts - Options to pass to the Implementation Module and callbacks Options: :ttl - The new ttl. If not specified the default will be used. { :ok , { old_token , old_claims } , { new_token , new_claims } } = MyApp.Guardian . refresh ( old_token , ttl : { 1 , :hour } ) See Guardian.refresh exchange(old_token, from_type, to_type, options) Exchanges one token for another of a different type. Especially useful to trade in a refresh token for an access one. Tokens are verified before performing the exchange to ensure that only valid tokens may be exchanged. Arguments: old_token - The existing token you wish to exchange. from_type - The type the old token must be. Can be given a list of types. to_type - The new type of token that you want back. options - The options to pass to the token module and callbacks. Options: Options may be used by your token module or callbacks. ttl - The ttl for the new token See Guardian.exchange Note: Copied from Guardian Docs","ref":"EpochtalkServer.Auth.Guardian.html","title":"EpochtalkServer.Auth.Guardian","type":"module"},{"doc":"An optional callback invoked after the token has been generated and signed.","ref":"EpochtalkServer.Auth.Guardian.html#after_encode_and_sign/4","title":"EpochtalkServer.Auth.Guardian.after_encode_and_sign/4","type":"function"},{"doc":"Callback implementation for Guardian.after_sign_in/5 .","ref":"EpochtalkServer.Auth.Guardian.html#after_sign_in/5","title":"EpochtalkServer.Auth.Guardian.after_sign_in/5","type":"function"},{"doc":"Callback implementation for Guardian.before_sign_out/3 .","ref":"EpochtalkServer.Auth.Guardian.html#before_sign_out/3","title":"EpochtalkServer.Auth.Guardian.before_sign_out/3","type":"function"},{"doc":"Callback implementation for Guardian.build_claims/3 .","ref":"EpochtalkServer.Auth.Guardian.html#build_claims/3","title":"EpochtalkServer.Auth.Guardian.build_claims/3","type":"function"},{"doc":"Fetches the configuration for this module.","ref":"EpochtalkServer.Auth.Guardian.html#config/0","title":"EpochtalkServer.Auth.Guardian.config/0","type":"function"},{"doc":"Returns a resolved value of the configuration found at a key. See Guardian.Config.resolve_value/1 .","ref":"EpochtalkServer.Auth.Guardian.html#config/2","title":"EpochtalkServer.Auth.Guardian.config/2","type":"function"},{"doc":"Decodes and verifies a token using the configuration on the implementation module. See Guardian.decode_and_verify/4 .","ref":"EpochtalkServer.Auth.Guardian.html#decode_and_verify/3","title":"EpochtalkServer.Auth.Guardian.decode_and_verify/3","type":"function"},{"doc":"The default type of token for this module.","ref":"EpochtalkServer.Auth.Guardian.html#default_token_type/0","title":"EpochtalkServer.Auth.Guardian.default_token_type/0","type":"function"},{"doc":"Encodes the claims. See Guardian.encode_and_sign/4 for more information.","ref":"EpochtalkServer.Auth.Guardian.html#encode_and_sign/3","title":"EpochtalkServer.Auth.Guardian.encode_and_sign/3","type":"function"},{"doc":"Exchanges a token of one type for another. See Guardian.exchange for more information.","ref":"EpochtalkServer.Auth.Guardian.html#exchange/4","title":"EpochtalkServer.Auth.Guardian.exchange/4","type":"function"},{"doc":"Callback implementation for Guardian.on_exchange/3 .","ref":"EpochtalkServer.Auth.Guardian.html#on_exchange/3","title":"EpochtalkServer.Auth.Guardian.on_exchange/3","type":"function"},{"doc":"An optional callback invoked when a token is refreshed.","ref":"EpochtalkServer.Auth.Guardian.html#on_refresh/3","title":"EpochtalkServer.Auth.Guardian.on_refresh/3","type":"function"},{"doc":"An optional callback invoked when a token is revoked.","ref":"EpochtalkServer.Auth.Guardian.html#on_revoke/3","title":"EpochtalkServer.Auth.Guardian.on_revoke/3","type":"function"},{"doc":"An optional callback invoked after the claims have been validated.","ref":"EpochtalkServer.Auth.Guardian.html#on_verify/3","title":"EpochtalkServer.Auth.Guardian.on_verify/3","type":"function"},{"doc":"Provides the content of the token but without verification of either the claims or the signature. Claims will be present at the :claims key. See Guardian.peek/2 for more information.","ref":"EpochtalkServer.Auth.Guardian.html#peek/1","title":"EpochtalkServer.Auth.Guardian.peek/1","type":"function"},{"doc":"Refresh a token. See Guardian.refresh for more information.","ref":"EpochtalkServer.Auth.Guardian.html#refresh/2","title":"EpochtalkServer.Auth.Guardian.refresh/2","type":"function"},{"doc":"Fetches the resource that is represented by claims. For JWT this would normally be found in the sub field.","ref":"EpochtalkServer.Auth.Guardian.html#resource_from_claims/1","title":"EpochtalkServer.Auth.Guardian.resource_from_claims/1","type":"function"},{"doc":"Fetch the resource and claims directly from a token. See Guardian.resource_from_token for more information.","ref":"EpochtalkServer.Auth.Guardian.html#resource_from_token/3","title":"EpochtalkServer.Auth.Guardian.resource_from_token/3","type":"function"},{"doc":"Revoke a token. See Guardian.revoke for more information.","ref":"EpochtalkServer.Auth.Guardian.html#revoke/2","title":"EpochtalkServer.Auth.Guardian.revoke/2","type":"function"},{"doc":"If Guardian.Plug.SlidingCookie is used, this callback will be invoked to return the new claims, or an error (which will mean the cookie will not be refreshed).","ref":"EpochtalkServer.Auth.Guardian.html#sliding_cookie/3","title":"EpochtalkServer.Auth.Guardian.sliding_cookie/3","type":"function"},{"doc":"Fetches the subject for a token for the provided resource and claims The subject should be a short identifier that can be used to identify the resource.","ref":"EpochtalkServer.Auth.Guardian.html#subject_for_token/2","title":"EpochtalkServer.Auth.Guardian.subject_for_token/2","type":"function"},{"doc":"Callback implementation for Guardian.verify_claims/2 .","ref":"EpochtalkServer.Auth.Guardian.html#verify_claims/2","title":"EpochtalkServer.Auth.Guardian.verify_claims/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html","title":"EpochtalkServer.Auth.Guardian.Plug","type":"module"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#authenticated?/2","title":"EpochtalkServer.Auth.Guardian.Plug.authenticated?/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#clear_remember_me/2","title":"EpochtalkServer.Auth.Guardian.Plug.clear_remember_me/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#current_claims/2","title":"EpochtalkServer.Auth.Guardian.Plug.current_claims/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#current_resource/2","title":"EpochtalkServer.Auth.Guardian.Plug.current_resource/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#current_token/2","title":"EpochtalkServer.Auth.Guardian.Plug.current_token/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#implementation/0","title":"EpochtalkServer.Auth.Guardian.Plug.implementation/0","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#put_current_claims/3","title":"EpochtalkServer.Auth.Guardian.Plug.put_current_claims/3","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#put_current_resource/3","title":"EpochtalkServer.Auth.Guardian.Plug.put_current_resource/3","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#put_current_token/3","title":"EpochtalkServer.Auth.Guardian.Plug.put_current_token/3","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#put_session_token/3","title":"EpochtalkServer.Auth.Guardian.Plug.put_session_token/3","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#remember_me/4","title":"EpochtalkServer.Auth.Guardian.Plug.remember_me/4","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#remember_me_from_token/4","title":"EpochtalkServer.Auth.Guardian.Plug.remember_me_from_token/4","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#sign_in/4","title":"EpochtalkServer.Auth.Guardian.Plug.sign_in/4","type":"function"},{"doc":"","ref":"EpochtalkServer.Auth.Guardian.Plug.html#sign_out/2","title":"EpochtalkServer.Auth.Guardian.Plug.sign_out/2","type":"function"},{"doc":"Used to generate and send emails from the API to a User .","ref":"EpochtalkServer.Mailer.html","title":"EpochtalkServer.Mailer","type":"module"},{"doc":"","ref":"EpochtalkServer.Mailer.html#deliver/2","title":"EpochtalkServer.Mailer.deliver/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Mailer.html#deliver!/2","title":"EpochtalkServer.Mailer.deliver!/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Mailer.html#deliver_many/2","title":"EpochtalkServer.Mailer.deliver_many/2","type":"function"},{"doc":"Sends confirmation email","ref":"EpochtalkServer.Mailer.html#send_confirm_account/1","title":"EpochtalkServer.Mailer.send_confirm_account/1","type":"function"},{"doc":"Ban model, for performing actions relating to banning","ref":"EpochtalkServer.Models.Ban.html","title":"EpochtalkServer.Models.Ban","type":"module"},{"doc":"Used to ban a User permanently. Updates supplied User model to reflect ban and returns.","ref":"EpochtalkServer.Models.Ban.html#ban/1","title":"EpochtalkServer.Models.Ban.ban/1","type":"function"},{"doc":"Used to ban a User until supplied expiration . Passing nil for expiration will permanently ban the User . Updates supplied User model to reflect ban and returns.","ref":"EpochtalkServer.Models.Ban.html#ban/2","title":"EpochtalkServer.Models.Ban.ban/2","type":"function"},{"doc":"Used to ban a User by user_id until supplied expiration . Passing nil for expiration will permanently ban the User","ref":"EpochtalkServer.Models.Ban.html#ban_by_user_id/2","title":"EpochtalkServer.Models.Ban.ban_by_user_id/2","type":"function"},{"doc":"Create ban changeset for Ban model, handles upsert of ban for banning","ref":"EpochtalkServer.Models.Ban.html#ban_changeset/2","title":"EpochtalkServer.Models.Ban.ban_changeset/2","type":"function"},{"doc":"Fetches Ban associated with a specific User","ref":"EpochtalkServer.Models.Ban.html#by_user_id/1","title":"EpochtalkServer.Models.Ban.by_user_id/1","type":"function"},{"doc":"Create generic changeset for Ban model","ref":"EpochtalkServer.Models.Ban.html#changeset/2","title":"EpochtalkServer.Models.Ban.changeset/2","type":"function"},{"doc":"Used to unban a User . Updates supplied User model to reflect unbanning and returns.","ref":"EpochtalkServer.Models.Ban.html#unban/1","title":"EpochtalkServer.Models.Ban.unban/1","type":"function"},{"doc":"Used to unban a User by user_id . Will return {:ok, nil} if user was never banned.","ref":"EpochtalkServer.Models.Ban.html#unban_by_user_id/1","title":"EpochtalkServer.Models.Ban.unban_by_user_id/1","type":"function"},{"doc":"Create unban changeset for Ban model, handles update of ban for unbanning","ref":"EpochtalkServer.Models.Ban.html#unban_changeset/2","title":"EpochtalkServer.Models.Ban.unban_changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Ban.html#t:t/0","title":"EpochtalkServer.Models.Ban.t/0","type":"type"},{"doc":"BannedAddress model, for performing actions relating to banning by ip/hostname","ref":"EpochtalkServer.Models.BannedAddress.html","title":"EpochtalkServer.Models.BannedAddress","type":"module"},{"doc":"Calculates the malicious score of the provided IP address, float score is returned if IP/Hostname are malicious, otherwise nil","ref":"EpochtalkServer.Models.BannedAddress.html#calculate_malicious_score_from_ip/1","title":"EpochtalkServer.Models.BannedAddress.calculate_malicious_score_from_ip/1","type":"function"},{"doc":"Creates changeset of BannedAddress model with hostname information","ref":"EpochtalkServer.Models.BannedAddress.html#hostname_changeset/2","title":"EpochtalkServer.Models.BannedAddress.hostname_changeset/2","type":"function"},{"doc":"Creates changeset of BannedAddress model with IP information","ref":"EpochtalkServer.Models.BannedAddress.html#ip_changeset/2","title":"EpochtalkServer.Models.BannedAddress.ip_changeset/2","type":"function"},{"doc":"Upserts a BannedAddress into the database and handles calculation of weight accounting for decay","ref":"EpochtalkServer.Models.BannedAddress.html#upsert/1","title":"EpochtalkServer.Models.BannedAddress.upsert/1","type":"function"},{"doc":"Creates changeset for upsert of BannedAddress model","ref":"EpochtalkServer.Models.BannedAddress.html#upsert_changeset/2","title":"EpochtalkServer.Models.BannedAddress.upsert_changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.BannedAddress.html#t:t/0","title":"EpochtalkServer.Models.BannedAddress.t/0","type":"type"},{"doc":"Board model, for performing actions relating to forum boards","ref":"EpochtalkServer.Models.Board.html","title":"EpochtalkServer.Models.Board","type":"module"},{"doc":"Create generic changeset for Board model","ref":"EpochtalkServer.Models.Board.html#changeset/2","title":"EpochtalkServer.Models.Board.changeset/2","type":"function"},{"doc":"Creates a new Board in the database","ref":"EpochtalkServer.Models.Board.html#create/1","title":"EpochtalkServer.Models.Board.create/1","type":"function"},{"doc":"Create changeset for creation of Board model","ref":"EpochtalkServer.Models.Board.html#create_changeset/2","title":"EpochtalkServer.Models.Board.create_changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Board.html#t:t/0","title":"EpochtalkServer.Models.Board.t/0","type":"type"},{"doc":"BoardMapping model, for performing actions relating to mapping forum boards and categories","ref":"EpochtalkServer.Models.BoardMapping.html","title":"EpochtalkServer.Models.BoardMapping","type":"module"},{"doc":"Create generic changeset for BoardMapping model","ref":"EpochtalkServer.Models.BoardMapping.html#changeset/2","title":"EpochtalkServer.Models.BoardMapping.changeset/2","type":"function"},{"doc":"Deletes a Board from the BoardMapping","ref":"EpochtalkServer.Models.BoardMapping.html#delete_board_by_id/1","title":"EpochtalkServer.Models.BoardMapping.delete_board_by_id/1","type":"function"},{"doc":"Updates BoardMapping in the database","ref":"EpochtalkServer.Models.BoardMapping.html#update/1","title":"EpochtalkServer.Models.BoardMapping.update/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.BoardMapping.html#t:t/0","title":"EpochtalkServer.Models.BoardMapping.t/0","type":"type"},{"doc":"BoardModerator model, for performing actions relating to Board moderators","ref":"EpochtalkServer.Models.BoardModerator.html","title":"EpochtalkServer.Models.BoardModerator","type":"module"},{"doc":"Create generic changeset for BoardModerator model","ref":"EpochtalkServer.Models.BoardModerator.html#changeset/2","title":"EpochtalkServer.Models.BoardModerator.changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.BoardModerator.html#t:t/0","title":"EpochtalkServer.Models.BoardModerator.t/0","type":"type"},{"doc":"Category model, for performing actions relating to forum categories","ref":"EpochtalkServer.Models.Category.html","title":"EpochtalkServer.Models.Category","type":"module"},{"doc":"Create generic changeset for Category model","ref":"EpochtalkServer.Models.Category.html#changeset/2","title":"EpochtalkServer.Models.Category.changeset/2","type":"function"},{"doc":"Creates a new Category in the database","ref":"EpochtalkServer.Models.Category.html#create/1","title":"EpochtalkServer.Models.Category.create/1","type":"function"},{"doc":"Creates changeset for inserting a new Category model","ref":"EpochtalkServer.Models.Category.html#create_changeset/2","title":"EpochtalkServer.Models.Category.create_changeset/2","type":"function"},{"doc":"Updates an existing Category in the database, used by board mapping to recategorize boards","ref":"EpochtalkServer.Models.Category.html#update_for_board_mapping/1","title":"EpochtalkServer.Models.Category.update_for_board_mapping/1","type":"function"},{"doc":"Creates changeset for updating an existing Category model","ref":"EpochtalkServer.Models.Category.html#update_for_board_mapping_changeset/2","title":"EpochtalkServer.Models.Category.update_for_board_mapping_changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Category.html#t:t/0","title":"EpochtalkServer.Models.Category.t/0","type":"type"},{"doc":"Configuration model, for performing actions relating to frontend Configuration","ref":"EpochtalkServer.Models.Configuration.html","title":"EpochtalkServer.Models.Configuration","type":"module"},{"doc":"Gets a Configuration from the database by name","ref":"EpochtalkServer.Models.Configuration.html#by_name/1","title":"EpochtalkServer.Models.Configuration.by_name/1","type":"function"},{"doc":"Creates a new Configuration into the database","ref":"EpochtalkServer.Models.Configuration.html#create/1","title":"EpochtalkServer.Models.Configuration.create/1","type":"function"},{"doc":"Create changeset for creating a new Configuration model","ref":"EpochtalkServer.Models.Configuration.html#create_changeset/2","title":"EpochtalkServer.Models.Configuration.create_changeset/2","type":"function"},{"doc":"Gets default frontend Configuration from the database","ref":"EpochtalkServer.Models.Configuration.html#get_default/0","title":"EpochtalkServer.Models.Configuration.get_default/0","type":"function"},{"doc":"Inserts a default Configuration into the database given config_map","ref":"EpochtalkServer.Models.Configuration.html#set_default/1","title":"EpochtalkServer.Models.Configuration.set_default/1","type":"function"},{"doc":"Warms :epochtalk_server[:frontend_config] config variable using Configuration stored in database, if present. If there is no Configuration in the database, the default value is taken from :epochtalk_server[:frontend_config] and inserted into the database as the default Configuration . Run as a Task on application startup.","ref":"EpochtalkServer.Models.Configuration.html#warm_frontend_config/0","title":"EpochtalkServer.Models.Configuration.warm_frontend_config/0","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Configuration.html#t:t/0","title":"EpochtalkServer.Models.Configuration.t/0","type":"type"},{"doc":"Invitation model, for performing actions relating to inviting new users to the forum","ref":"EpochtalkServer.Models.Invitation.html","title":"EpochtalkServer.Models.Invitation","type":"module"},{"doc":"Creates a new Invitation in the database","ref":"EpochtalkServer.Models.Invitation.html#create/1","title":"EpochtalkServer.Models.Invitation.create/1","type":"function"},{"doc":"Create changeset for inserting a new Invitation model","ref":"EpochtalkServer.Models.Invitation.html#create_changeset/2","title":"EpochtalkServer.Models.Invitation.create_changeset/2","type":"function"},{"doc":"Deletes Invitation from the database by email","ref":"EpochtalkServer.Models.Invitation.html#delete/1","title":"EpochtalkServer.Models.Invitation.delete/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Invitation.html#t:t/0","title":"EpochtalkServer.Models.Invitation.t/0","type":"type"},{"doc":"Mention model, for performing actions relating to forum categories","ref":"EpochtalkServer.Models.Mention.html","title":"EpochtalkServer.Models.Mention","type":"module"},{"doc":"Create generic changeset for Mention model","ref":"EpochtalkServer.Models.Mention.html#changeset/2","title":"EpochtalkServer.Models.Mention.changeset/2","type":"function"},{"doc":"Page Mention models by for a specific User Valid Options name type details :per_page non_neg_integer records per page to return :extended boolean returns board and post details with mention if true","ref":"EpochtalkServer.Models.Mention.html#page_by_user_id/3","title":"EpochtalkServer.Models.Mention.page_by_user_id/3","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Mention.html#t:t/0","title":"EpochtalkServer.Models.Mention.t/0","type":"type"},{"doc":"MetadataBoard model, for performing actions relating to Board metadata","ref":"EpochtalkServer.Models.MetadataBoard.html","title":"EpochtalkServer.Models.MetadataBoard","type":"module"},{"doc":"Create changeset for inserting a new MetadataBoard model","ref":"EpochtalkServer.Models.MetadataBoard.html#changeset/2","title":"EpochtalkServer.Models.MetadataBoard.changeset/2","type":"function"},{"doc":"Inserts a new MetadataBoard into the database","ref":"EpochtalkServer.Models.MetadataBoard.html#insert/1","title":"EpochtalkServer.Models.MetadataBoard.insert/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.MetadataBoard.html#t:t/0","title":"EpochtalkServer.Models.MetadataBoard.t/0","type":"type"},{"doc":"Notification model, for performing actions relating to forum categories","ref":"EpochtalkServer.Models.Notification.html","title":"EpochtalkServer.Models.Notification","type":"module"},{"doc":"Create generic changeset for Notification model","ref":"EpochtalkServer.Models.Notification.html#changeset/2","title":"EpochtalkServer.Models.Notification.changeset/2","type":"function"},{"doc":"Returns Notification counts for a specific User by id , from the database. Used to display new message/mention notifications.","ref":"EpochtalkServer.Models.Notification.html#counts_by_user_id/2","title":"EpochtalkServer.Models.Notification.counts_by_user_id/2","type":"function"},{"doc":"Dismisses specific Notification by id . Used to display clear a specific message/mention Notification .","ref":"EpochtalkServer.Models.Notification.html#dismiss/1","title":"EpochtalkServer.Models.Notification.dismiss/1","type":"function"},{"doc":"Dismisses Notification counts for a specific User by id . Used to display clear message/mention notifications.","ref":"EpochtalkServer.Models.Notification.html#dismiss_type_by_user_id/2","title":"EpochtalkServer.Models.Notification.dismiss_type_by_user_id/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Notification.html#t:t/0","title":"EpochtalkServer.Models.Notification.t/0","type":"type"},{"doc":"Permission model, for performing actions relating to Role permissions, used for seeding","ref":"EpochtalkServer.Models.Permission.html","title":"EpochtalkServer.Models.Permission","type":"module"},{"doc":"Returns every Permission record in the database","ref":"EpochtalkServer.Models.Permission.html#all/0","title":"EpochtalkServer.Models.Permission.all/0","type":"function"},{"doc":"Returns a specific Permission provided it's path","ref":"EpochtalkServer.Models.Permission.html#by_path/1","title":"EpochtalkServer.Models.Permission.by_path/1","type":"function"},{"doc":"Creates a generic changeset for Permission model","ref":"EpochtalkServer.Models.Permission.html#changeset/2","title":"EpochtalkServer.Models.Permission.changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Permission.html#t:t/0","title":"EpochtalkServer.Models.Permission.t/0","type":"type"},{"doc":"Post model, for performing actions relating to forum posts","ref":"EpochtalkServer.Models.Post.html","title":"EpochtalkServer.Models.Post","type":"module"},{"doc":"Create generic changeset for Post model","ref":"EpochtalkServer.Models.Post.html#changeset/2","title":"EpochtalkServer.Models.Post.changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Post.html#t:t/0","title":"EpochtalkServer.Models.Post.t/0","type":"type"},{"doc":"Preference model, for performing actions relating to a user's preferences","ref":"EpochtalkServer.Models.Preference.html","title":"EpochtalkServer.Models.Preference","type":"module"},{"doc":"Fetches Preference associated with a specific User","ref":"EpochtalkServer.Models.Preference.html#by_user_id/1","title":"EpochtalkServer.Models.Preference.by_user_id/1","type":"function"},{"doc":"Creates a generic changeset for Preference model","ref":"EpochtalkServer.Models.Preference.html#changeset/2","title":"EpochtalkServer.Models.Preference.changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Preference.html#t:t/0","title":"EpochtalkServer.Models.Preference.t/0","type":"type"},{"doc":"Profile model, for performing actions relating a user's profile","ref":"EpochtalkServer.Models.Profile.html","title":"EpochtalkServer.Models.Profile","type":"module"},{"doc":"Creates a generic changeset for Profile model","ref":"EpochtalkServer.Models.Profile.html#changeset/2","title":"EpochtalkServer.Models.Profile.changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Profile.html#t:t/0","title":"EpochtalkServer.Models.Profile.t/0","type":"type"},{"doc":"Role model, for performing actions relating to user roles","ref":"EpochtalkServer.Models.Role.html","title":"EpochtalkServer.Models.Role","type":"module"},{"doc":"Returns every Role record in the database","ref":"EpochtalkServer.Models.Role.html#all/0","title":"EpochtalkServer.Models.Role.all/0","type":"function"},{"doc":"Returns a Role or list of roles, for specified lookup(s)","ref":"EpochtalkServer.Models.Role.html#by_lookup/1","title":"EpochtalkServer.Models.Role.by_lookup/1","type":"function"},{"doc":"Returns a list containing a user's roles","ref":"EpochtalkServer.Models.Role.html#by_user_id/1","title":"EpochtalkServer.Models.Role.by_user_id/1","type":"function"},{"doc":"Create generic changeset for the Role model","ref":"EpochtalkServer.Models.Role.html#changeset/2","title":"EpochtalkServer.Models.Role.changeset/2","type":"function"},{"doc":"Returns id for the banned Role","ref":"EpochtalkServer.Models.Role.html#get_banned_role_id/0","title":"EpochtalkServer.Models.Role.get_banned_role_id/0","type":"function"},{"doc":"Returns default Role , for base installation this is the user role, if :epochtalk_server[:frontend_config][&quot;newbie_enabled&quot;] configuration is set to true, then newbie is the default role.","ref":"EpochtalkServer.Models.Role.html#get_default/0","title":"EpochtalkServer.Models.Role.get_default/0","type":"function"},{"doc":"Takes in list of user's roles, and returns an xored map of all Role permissions","ref":"EpochtalkServer.Models.Role.html#get_masked_permissions/1","title":"EpochtalkServer.Models.Role.get_masked_permissions/1","type":"function"},{"doc":"Returns id for the newbie Role","ref":"EpochtalkServer.Models.Role.html#get_newbie_role_id/0","title":"EpochtalkServer.Models.Role.get_newbie_role_id/0","type":"function"},{"doc":"The banned Role takes priority over all other roles If a User is banned, only return the banned Role This helper needs to be called anywhere that modifies a user's ban and is expected to return the updated user's roles.","ref":"EpochtalkServer.Models.Role.html#handle_banned_user_role/1","title":"EpochtalkServer.Models.Role.handle_banned_user_role/1","type":"function"},{"doc":"Default role is not stored in the database, in order to save space checks the role array on the user model if roles array is empty, sets the default role by appending it This helper needs to be called anywhere that modifies a user's roles and is expected to return the updated user's roles.","ref":"EpochtalkServer.Models.Role.html#handle_empty_user_roles/1","title":"EpochtalkServer.Models.Role.handle_empty_user_roles/1","type":"function"},{"doc":"Inserts a new Role into the database","ref":"EpochtalkServer.Models.Role.html#insert/1","title":"EpochtalkServer.Models.Role.insert/1","type":"function"},{"doc":"Updates the permissions of an existing Role in the database","ref":"EpochtalkServer.Models.Role.html#set_permissions/2","title":"EpochtalkServer.Models.Role.set_permissions/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Role.html#t:t/0","title":"EpochtalkServer.Models.Role.t/0","type":"type"},{"doc":"RolePermission model, for performing actions relating to a roles permissions","ref":"EpochtalkServer.Models.RolePermission.html","title":"EpochtalkServer.Models.RolePermission","type":"module"},{"doc":"Creates a generic changeset for RolePermission model","ref":"EpochtalkServer.Models.RolePermission.html#changeset/2","title":"EpochtalkServer.Models.RolePermission.changeset/2","type":"function"},{"doc":"Inserts a new RolePermission into the database","ref":"EpochtalkServer.Models.RolePermission.html#insert/1","title":"EpochtalkServer.Models.RolePermission.insert/1","type":"function"},{"doc":"Sets all roles permissions to value: false, modified: false For server-side role-loading use, only runs if roles permissions table is currently empty","ref":"EpochtalkServer.Models.RolePermission.html#maybe_init!/0","title":"EpochtalkServer.Models.RolePermission.maybe_init!/0","type":"function"},{"doc":"Derives a single nested map of all permissions for a role","ref":"EpochtalkServer.Models.RolePermission.html#permissions_map_by_role_id/1","title":"EpochtalkServer.Models.RolePermission.permissions_map_by_role_id/1","type":"function"},{"doc":"Used to update the value of a RolePermission in the database, if it exists or created it, if it doesnt","ref":"EpochtalkServer.Models.RolePermission.html#upsert_value/1","title":"EpochtalkServer.Models.RolePermission.upsert_value/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.RolePermission.html#t:t/0","title":"EpochtalkServer.Models.RolePermission.t/0","type":"type"},{"doc":"RoleUser model, for performing actions relating a setting a Role for a User","ref":"EpochtalkServer.Models.RoleUser.html","title":"EpochtalkServer.Models.RoleUser","type":"module"},{"doc":"Creates a generic changeset for RoleUser model","ref":"EpochtalkServer.Models.RoleUser.html#changeset/2","title":"EpochtalkServer.Models.RoleUser.changeset/2","type":"function"},{"doc":"Removes specified Role from specified User","ref":"EpochtalkServer.Models.RoleUser.html#delete_user_role/2","title":"EpochtalkServer.Models.RoleUser.delete_user_role/2","type":"function"},{"doc":"Assigns a specific User to have the superAdministrator Role","ref":"EpochtalkServer.Models.RoleUser.html#set_admin/1","title":"EpochtalkServer.Models.RoleUser.set_admin/1","type":"function"},{"doc":"Assigns a specific User to have the specified Role","ref":"EpochtalkServer.Models.RoleUser.html#set_user_role/2","title":"EpochtalkServer.Models.RoleUser.set_user_role/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.RoleUser.html#t:t/0","title":"EpochtalkServer.Models.RoleUser.t/0","type":"type"},{"doc":"Thread model, for performing actions relating to forum threads","ref":"EpochtalkServer.Models.Thread.html","title":"EpochtalkServer.Models.Thread","type":"module"},{"doc":"Create generic changeset for Thread model","ref":"EpochtalkServer.Models.Thread.html#changeset/2","title":"EpochtalkServer.Models.Thread.changeset/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.Thread.html#t:t/0","title":"EpochtalkServer.Models.Thread.t/0","type":"type"},{"doc":"User model, for performing actions relating a user","ref":"EpochtalkServer.Models.User.html","title":"EpochtalkServer.Models.User","type":"module"},{"doc":"Gets a User from the database by id","ref":"EpochtalkServer.Models.User.html#by_id/1","title":"EpochtalkServer.Models.User.by_id/1","type":"function"},{"doc":"Gets a User by username , from the database, with all of it's associations preloaded. Appends the user Role to user.roles if no roles present. Strips all roles but banned from user.roles if user is banned.","ref":"EpochtalkServer.Models.User.html#by_username/1","title":"EpochtalkServer.Models.User.by_username/1","type":"function"},{"doc":"Clears the malicious score of a User by id , from the database","ref":"EpochtalkServer.Models.User.html#clear_malicious_score_by_id/1","title":"EpochtalkServer.Models.User.clear_malicious_score_by_id/1","type":"function"},{"doc":"Creates a new User in the database, used for registration","ref":"EpochtalkServer.Models.User.html#create/1","title":"EpochtalkServer.Models.User.create/1","type":"function"},{"doc":"Creates a new User in the database and assigns the superAdministrator Role , used for seeding","ref":"EpochtalkServer.Models.User.html#create/2","title":"EpochtalkServer.Models.User.create/2","type":"function"},{"doc":"Checks if the provided User is malicious using the provided ip . If the User is found to be malicious after checking BannedAddress records, the user's malicious_score is updated and is assigned the banned Role , in the database and in place. Otherwise the user is just returned with no change.","ref":"EpochtalkServer.Models.User.html#handle_malicious_user/2","title":"EpochtalkServer.Models.User.handle_malicious_user/2","type":"function"},{"doc":"Creates a registration changeset for User model, returns an error changeset if validation of username, email and password do not pass.","ref":"EpochtalkServer.Models.User.html#registration_changeset/2","title":"EpochtalkServer.Models.User.registration_changeset/2","type":"function"},{"doc":"Validates with Argon2 that a User passhash matches the supplied password","ref":"EpochtalkServer.Models.User.html#valid_password?/2","title":"EpochtalkServer.Models.User.valid_password?/2","type":"function"},{"doc":"Checks if User with email exists in the database","ref":"EpochtalkServer.Models.User.html#with_email_exists?/1","title":"EpochtalkServer.Models.User.with_email_exists?/1","type":"function"},{"doc":"Checks if User with username exists in the database","ref":"EpochtalkServer.Models.User.html#with_username_exists?/1","title":"EpochtalkServer.Models.User.with_username_exists?/1","type":"function"},{"doc":"","ref":"EpochtalkServer.Models.User.html#t:t/0","title":"EpochtalkServer.Models.User.t/0","type":"type"},{"doc":"","ref":"EpochtalkServer.Repo.html","title":"EpochtalkServer.Repo","type":"module"},{"doc":"Callback implementation for Ecto.Repo.aggregate/3 .","ref":"EpochtalkServer.Repo.html#aggregate/3","title":"EpochtalkServer.Repo.aggregate/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.aggregate/4 .","ref":"EpochtalkServer.Repo.html#aggregate/4","title":"EpochtalkServer.Repo.aggregate/4","type":"function"},{"doc":"Callback implementation for Ecto.Repo.all/2 .","ref":"EpochtalkServer.Repo.html#all/2","title":"EpochtalkServer.Repo.all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checked_out?/0 .","ref":"EpochtalkServer.Repo.html#checked_out?/0","title":"EpochtalkServer.Repo.checked_out?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checkout/2 .","ref":"EpochtalkServer.Repo.html#checkout/2","title":"EpochtalkServer.Repo.checkout/2","type":"function"},{"doc":"","ref":"EpochtalkServer.Repo.html#child_spec/1","title":"EpochtalkServer.Repo.child_spec/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.config/0 .","ref":"EpochtalkServer.Repo.html#config/0","title":"EpochtalkServer.Repo.config/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.default_options/1 .","ref":"EpochtalkServer.Repo.html#default_options/1","title":"EpochtalkServer.Repo.default_options/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete/2 .","ref":"EpochtalkServer.Repo.html#delete/2","title":"EpochtalkServer.Repo.delete/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete!/2 .","ref":"EpochtalkServer.Repo.html#delete!/2","title":"EpochtalkServer.Repo.delete!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete_all/2 .","ref":"EpochtalkServer.Repo.html#delete_all/2","title":"EpochtalkServer.Repo.delete_all/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that forces all connections in the pool to disconnect within the given interval. See Ecto.Adapters.SQL.disconnect_all/3 for more information.","ref":"EpochtalkServer.Repo.html#disconnect_all/2","title":"EpochtalkServer.Repo.disconnect_all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.exists?/2 .","ref":"EpochtalkServer.Repo.html#exists?/2","title":"EpochtalkServer.Repo.exists?/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar depending on the adapter to obtain statistics for the given query. See Ecto.Adapters.SQL.explain/4 for more information.","ref":"EpochtalkServer.Repo.html#explain/3","title":"EpochtalkServer.Repo.explain/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get/3 .","ref":"EpochtalkServer.Repo.html#get/3","title":"EpochtalkServer.Repo.get/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get!/3 .","ref":"EpochtalkServer.Repo.html#get!/3","title":"EpochtalkServer.Repo.get!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by/3 .","ref":"EpochtalkServer.Repo.html#get_by/3","title":"EpochtalkServer.Repo.get_by/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by!/3 .","ref":"EpochtalkServer.Repo.html#get_by!/3","title":"EpochtalkServer.Repo.get_by!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_dynamic_repo/0 .","ref":"EpochtalkServer.Repo.html#get_dynamic_repo/0","title":"EpochtalkServer.Repo.get_dynamic_repo/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.in_transaction?/0 .","ref":"EpochtalkServer.Repo.html#in_transaction?/0","title":"EpochtalkServer.Repo.in_transaction?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert/2 .","ref":"EpochtalkServer.Repo.html#insert/2","title":"EpochtalkServer.Repo.insert/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert!/2 .","ref":"EpochtalkServer.Repo.html#insert!/2","title":"EpochtalkServer.Repo.insert!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_all/3 .","ref":"EpochtalkServer.Repo.html#insert_all/3","title":"EpochtalkServer.Repo.insert_all/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update/2 .","ref":"EpochtalkServer.Repo.html#insert_or_update/2","title":"EpochtalkServer.Repo.insert_or_update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update!/2 .","ref":"EpochtalkServer.Repo.html#insert_or_update!/2","title":"EpochtalkServer.Repo.insert_or_update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.load/2 .","ref":"EpochtalkServer.Repo.html#load/2","title":"EpochtalkServer.Repo.load/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one/2 .","ref":"EpochtalkServer.Repo.html#one/2","title":"EpochtalkServer.Repo.one/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one!/2 .","ref":"EpochtalkServer.Repo.html#one!/2","title":"EpochtalkServer.Repo.one!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.preload/3 .","ref":"EpochtalkServer.Repo.html#preload/3","title":"EpochtalkServer.Repo.preload/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.prepare_query/3 .","ref":"EpochtalkServer.Repo.html#prepare_query/3","title":"EpochtalkServer.Repo.prepare_query/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.put_dynamic_repo/1 .","ref":"EpochtalkServer.Repo.html#put_dynamic_repo/1","title":"EpochtalkServer.Repo.put_dynamic_repo/1","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query/4 for more information.","ref":"EpochtalkServer.Repo.html#query/3","title":"EpochtalkServer.Repo.query/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query!/4 for more information.","ref":"EpochtalkServer.Repo.html#query!/3","title":"EpochtalkServer.Repo.query!/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many/4 for more information.","ref":"EpochtalkServer.Repo.html#query_many/3","title":"EpochtalkServer.Repo.query_many/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given multi-result query. See Ecto.Adapters.SQL.query_many!/4 for more information.","ref":"EpochtalkServer.Repo.html#query_many!/3","title":"EpochtalkServer.Repo.query_many!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload/2 .","ref":"EpochtalkServer.Repo.html#reload/2","title":"EpochtalkServer.Repo.reload/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.reload!/2 .","ref":"EpochtalkServer.Repo.html#reload!/2","title":"EpochtalkServer.Repo.reload!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.rollback/1 .","ref":"EpochtalkServer.Repo.html#rollback/1","title":"EpochtalkServer.Repo.rollback/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.start_link/1 .","ref":"EpochtalkServer.Repo.html#start_link/1","title":"EpochtalkServer.Repo.start_link/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stop/1 .","ref":"EpochtalkServer.Repo.html#stop/1","title":"EpochtalkServer.Repo.stop/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stream/2 .","ref":"EpochtalkServer.Repo.html#stream/2","title":"EpochtalkServer.Repo.stream/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that translates the given query to SQL. See Ecto.Adapters.SQL.to_sql/3 for more information.","ref":"EpochtalkServer.Repo.html#to_sql/2","title":"EpochtalkServer.Repo.to_sql/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.transaction/2 .","ref":"EpochtalkServer.Repo.html#transaction/2","title":"EpochtalkServer.Repo.transaction/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update/2 .","ref":"EpochtalkServer.Repo.html#update/2","title":"EpochtalkServer.Repo.update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update!/2 .","ref":"EpochtalkServer.Repo.html#update!/2","title":"EpochtalkServer.Repo.update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update_all/3 .","ref":"EpochtalkServer.Repo.html#update_all/3","title":"EpochtalkServer.Repo.update_all/3","type":"function"},{"doc":"Manages User sessions in Redis. Used by Auth related User actions.","ref":"EpochtalkServer.Session.html","title":"EpochtalkServer.Session","type":"module"},{"doc":"Create session performs the following actions: Sets user's session id, timestamp, ttl Logs User in with Guardian to get token Saves User session info to redis (avatar, roles, moderating, ban info, etc) returns {:ok, user, token and conn} TODO(boka): Handle expiration of redis sessions (this is handled in guardian but not redis)","ref":"EpochtalkServer.Session.html#create/3","title":"EpochtalkServer.Session.create/3","type":"function"},{"doc":"Deletes a specific User session","ref":"EpochtalkServer.Session.html#delete_session/2","title":"EpochtalkServer.Session.delete_session/2","type":"function"},{"doc":"Deletes every session instance for the specified User","ref":"EpochtalkServer.Session.html#delete_sessions/1","title":"EpochtalkServer.Session.delete_sessions/1","type":"function"},{"doc":"Gets all sessions for a specific User","ref":"EpochtalkServer.Session.html#get_sessions/1","title":"EpochtalkServer.Session.get_sessions/1","type":"function"},{"doc":"The entrypoint for defining your web interface, such as controllers, views, channels and so on. This can be used in your application as: use EpochtalkServerWeb , :controller use EpochtalkServerWeb , :view The definitions below will be executed for every view, controller, etc, so keep them short and clean, focused on imports, uses and aliases. Do NOT define functions inside the quoted expressions below. Instead, define any helper function in modules and import those modules here.","ref":"EpochtalkServerWeb.html","title":"EpochtalkServerWeb","type":"module"},{"doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"EpochtalkServerWeb.html#__using__/1","title":"EpochtalkServerWeb.__using__/1","type":"macro"},{"doc":"","ref":"EpochtalkServerWeb.html#channel/0","title":"EpochtalkServerWeb.channel/0","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.html#controller/0","title":"EpochtalkServerWeb.controller/0","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.html#router/0","title":"EpochtalkServerWeb.router/0","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.html#view/0","title":"EpochtalkServerWeb.view/0","type":"function"},{"doc":"Controller For Configuration related API requests","ref":"EpochtalkServerWeb.ConfigurationController.html","title":"EpochtalkServerWeb.ConfigurationController","type":"module"},{"doc":"Used to render /config.js which is used by the Epochtalk Vue Frontend","ref":"EpochtalkServerWeb.ConfigurationController.html#config/2","title":"EpochtalkServerWeb.ConfigurationController.config/2","type":"function"},{"doc":"Renders and formats Configuration data, in JSON format for frontend","ref":"EpochtalkServerWeb.ConfigurationView.html","title":"EpochtalkServerWeb.ConfigurationView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"EpochtalkServerWeb.ConfigurationView.html#__resource__/0","title":"EpochtalkServerWeb.ConfigurationView.__resource__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"EpochtalkServerWeb.ConfigurationView.html#render/2","title":"EpochtalkServerWeb.ConfigurationView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"EpochtalkServerWeb.ConfigurationView.html#template_not_found/2","title":"EpochtalkServerWeb.ConfigurationView.template_not_found/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.CustomErrors.html","title":"EpochtalkServerWeb.CustomErrors","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.Endpoint.html","title":"EpochtalkServerWeb.Endpoint","type":"module"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast/3 .","ref":"EpochtalkServerWeb.Endpoint.html#broadcast/3","title":"EpochtalkServerWeb.Endpoint.broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast!/3 .","ref":"EpochtalkServerWeb.Endpoint.html#broadcast!/3","title":"EpochtalkServerWeb.Endpoint.broadcast!/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from/4 .","ref":"EpochtalkServerWeb.Endpoint.html#broadcast_from/4","title":"EpochtalkServerWeb.Endpoint.broadcast_from/4","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.broadcast_from!/4 .","ref":"EpochtalkServerWeb.Endpoint.html#broadcast_from!/4","title":"EpochtalkServerWeb.Endpoint.broadcast_from!/4","type":"function"},{"doc":"Callback implementation for Plug.call/2 .","ref":"EpochtalkServerWeb.Endpoint.html#call/2","title":"EpochtalkServerWeb.Endpoint.call/2","type":"function"},{"doc":"Returns the child specification to start the endpoint under a supervision tree.","ref":"EpochtalkServerWeb.Endpoint.html#child_spec/1","title":"EpochtalkServerWeb.Endpoint.child_spec/1","type":"function"},{"doc":"Returns the endpoint configuration for key Returns default if the key does not exist.","ref":"EpochtalkServerWeb.Endpoint.html#config/2","title":"EpochtalkServerWeb.Endpoint.config/2","type":"function"},{"doc":"Reloads the configuration given the application environment changes.","ref":"EpochtalkServerWeb.Endpoint.html#config_change/2","title":"EpochtalkServerWeb.Endpoint.config_change/2","type":"function"},{"doc":"Returns the host for the given endpoint.","ref":"EpochtalkServerWeb.Endpoint.html#host/0","title":"EpochtalkServerWeb.Endpoint.host/0","type":"function"},{"doc":"Callback implementation for Plug.init/1 .","ref":"EpochtalkServerWeb.Endpoint.html#init/1","title":"EpochtalkServerWeb.Endpoint.init/1","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast/3 .","ref":"EpochtalkServerWeb.Endpoint.html#local_broadcast/3","title":"EpochtalkServerWeb.Endpoint.local_broadcast/3","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.local_broadcast_from/4 .","ref":"EpochtalkServerWeb.Endpoint.html#local_broadcast_from/4","title":"EpochtalkServerWeb.Endpoint.local_broadcast_from/4","type":"function"},{"doc":"Generates the path information when routing to this endpoint.","ref":"EpochtalkServerWeb.Endpoint.html#path/1","title":"EpochtalkServerWeb.Endpoint.path/1","type":"function"},{"doc":"Generates the script name.","ref":"EpochtalkServerWeb.Endpoint.html#script_name/0","title":"EpochtalkServerWeb.Endpoint.script_name/0","type":"function"},{"doc":"Starts the endpoint supervision tree. Options :log_access_url - if the access url should be logged once the endpoint starts All other options are merged into the endpoint configuration.","ref":"EpochtalkServerWeb.Endpoint.html#start_link/1","title":"EpochtalkServerWeb.Endpoint.start_link/1","type":"function"},{"doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static . Meant to be used for Subresource Integrity with CDNs.","ref":"EpochtalkServerWeb.Endpoint.html#static_integrity/1","title":"EpochtalkServerWeb.Endpoint.static_integrity/1","type":"function"},{"doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity .","ref":"EpochtalkServerWeb.Endpoint.html#static_lookup/1","title":"EpochtalkServerWeb.Endpoint.static_lookup/1","type":"function"},{"doc":"Generates a route to a static file in priv/static .","ref":"EpochtalkServerWeb.Endpoint.html#static_path/1","title":"EpochtalkServerWeb.Endpoint.static_path/1","type":"function"},{"doc":"Generates the static URL without any path information. It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set.","ref":"EpochtalkServerWeb.Endpoint.html#static_url/0","title":"EpochtalkServerWeb.Endpoint.static_url/0","type":"function"},{"doc":"Generates the endpoint base URL but as a URI struct. It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers.","ref":"EpochtalkServerWeb.Endpoint.html#struct_url/0","title":"EpochtalkServerWeb.Endpoint.struct_url/0","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.subscribe/2 .","ref":"EpochtalkServerWeb.Endpoint.html#subscribe/2","title":"EpochtalkServerWeb.Endpoint.subscribe/2","type":"function"},{"doc":"Callback implementation for Phoenix.Endpoint.unsubscribe/1 .","ref":"EpochtalkServerWeb.Endpoint.html#unsubscribe/1","title":"EpochtalkServerWeb.Endpoint.unsubscribe/1","type":"function"},{"doc":"Generates the endpoint base URL without any path information. It uses the configuration under :url to generate such.","ref":"EpochtalkServerWeb.Endpoint.html#url/0","title":"EpochtalkServerWeb.Endpoint.url/0","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Endpoint.CacheBodyReader.html","title":"EpochtalkServerWeb.Endpoint.CacheBodyReader","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.Endpoint.CacheBodyReader.html#read_body/2","title":"EpochtalkServerWeb.Endpoint.CacheBodyReader.read_body/2","type":"function"},{"doc":"Conveniences for translating and building error messages.","ref":"EpochtalkServerWeb.ErrorHelpers.html","title":"EpochtalkServerWeb.ErrorHelpers","type":"module"},{"doc":"Translates changeset errors to string message.","ref":"EpochtalkServerWeb.ErrorHelpers.html#changeset_error_to_string/1","title":"EpochtalkServerWeb.ErrorHelpers.changeset_error_to_string/1","type":"function"},{"doc":"Renders error json from error data which could be a message or changeset errors.","ref":"EpochtalkServerWeb.ErrorHelpers.html#render_json_error/3","title":"EpochtalkServerWeb.ErrorHelpers.render_json_error/3","type":"function"},{"doc":"Renders and formats error data, in JSON format for frontend","ref":"EpochtalkServerWeb.ErrorView.html","title":"EpochtalkServerWeb.ErrorView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"EpochtalkServerWeb.ErrorView.html#__resource__/0","title":"EpochtalkServerWeb.ErrorView.__resource__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"EpochtalkServerWeb.ErrorView.html#render/2","title":"EpochtalkServerWeb.ErrorView.render/2","type":"function"},{"doc":"Render uses template_not_found when Phoenix cannot find the specified template, this has been modified to handle and all types of errors. Epochtalk Server sends all errors through this view to render a consistent error JSON. Example iex&gt; EpochtalkServerWeb.ErrorView . render ( &quot;500.json&quot; ) %{ error : &quot;Internal Server Error&quot; , message : &quot;Request Error&quot; , status : 500 } iex&gt; EpochtalkServerWeb.ErrorView . render ( &quot;400.json&quot; ) %{ error : &quot;Bad Request&quot; , message : &quot;Request Error&quot; , status : 400 } iex&gt; EpochtalkServerWeb.ErrorView . render ( &quot;404.json&quot; ) %{ error : &quot;Not Found&quot; , message : &quot;Request Error&quot; , status : 404 } iex&gt; EpochtalkServerWeb.ErrorView . render ( &quot;401.json&quot; ) %{ error : &quot;Unauthorized&quot; , message : &quot;Request Error&quot; , status : 401 } iex&gt; EpochtalkServerWeb.ErrorView . template_not_found ( &quot;DoesNotExist.json&quot; , %{ message : &quot;Custom Error Message&quot; , status : 500 } ) %{ error : &quot;Internal Server Error&quot; , message : &quot;Custom Error Message&quot; , status : 500 } iex&gt; EpochtalkServerWeb.ErrorView . template_not_found ( &quot;DoesNotExist.json&quot; , %{ message : &quot;Custom Error Message&quot; , status : 404 } ) %{ error : &quot;Not Found&quot; , message : &quot;Custom Error Message&quot; , status : 404 }","ref":"EpochtalkServerWeb.ErrorView.html#template_not_found/2","title":"EpochtalkServerWeb.ErrorView.template_not_found/2","type":"function"},{"doc":"Helper module which intercepts guardian errors.","ref":"EpochtalkServerWeb.GuardianErrorHandler.html","title":"EpochtalkServerWeb.GuardianErrorHandler","type":"module"},{"doc":"This is used to convert errors coming out of the guardian pipelines into a json error, Renders error tuples received from guardian pipeline into a json error response.","ref":"EpochtalkServerWeb.GuardianErrorHandler.html#auth_error/3","title":"EpochtalkServerWeb.GuardianErrorHandler.auth_error/3","type":"function"},{"doc":"Helper for paginating database queries","ref":"EpochtalkServerWeb.Helpers.Pagination.html","title":"EpochtalkServerWeb.Helpers.Pagination","type":"module"},{"doc":"Takes in a query, page and per_page option, returns paginated data and relevant pagination data for frontend (ex. page, limit, next, prev) Example iex&gt; import Ecto.Query iex&gt; alias EpochtalkServer.Models . { Mention , Invitation } iex&gt; alias EpochtalkServerWeb.Helpers.Pagination iex&gt; Mention ...&gt; |&gt; order_by ( asc : :id ) ...&gt; |&gt; Pagination . page_simple ( 1 , per_page : 25 ) { :ok , [ ] , %{ limit : 25 , next : false , page : 1 , prev : false } } iex&gt; Invitation ...&gt; |&gt; order_by ( desc : :email ) ...&gt; |&gt; Pagination . page_simple ( 1 , per_page : 10 ) { :ok , [ ] , %{ limit : 10 , next : false , page : 1 , prev : false } }","ref":"EpochtalkServerWeb.Helpers.Pagination.html#page_simple/3","title":"EpochtalkServerWeb.Helpers.Pagination.page_simple/3","type":"function"},{"doc":"Helper for validating and casting query parameters not associated with a model. Note: Changesets are used to validate query parameters that are associated with a model.","ref":"EpochtalkServerWeb.Helpers.Validate.html","title":"EpochtalkServerWeb.Helpers.Validate","type":"module"},{"doc":"Helper used to validate and cast request parameters directly out of the incoming paylod map (usually a controller function's attrs parameter) to the specified type. Will raise an EpochtalkServerWeb.CustomErrors.InvalidPayload exception if map value does not pass validation and casting. Valid Types type supported options :integer :required , :key , :min , :max :boolean :required , :key Valid Options option description :required true will raise an exception if casting nil :min min of value being cast to :integer :max max of value being cast to :integer Example iex&gt; alias EpochtalkServerWeb.Helpers.Validate iex&gt; attrs = %{ &quot;page&quot; =&gt; &quot;42&quot; , &quot;extended&quot; =&gt; &quot;true&quot; , &quot;debug&quot; =&gt; &quot;false&quot; } iex&gt; Validate . cast ( attrs , &quot;page&quot; , :integer , min : 1 , max : 99 , required : true ) 42 iex&gt; Validate . cast ( attrs , &quot;limit&quot; , :integer , min : 1 ) nil iex&gt; Validate . cast ( attrs , &quot;debug&quot; , :boolean ) false iex&gt; Validate . cast ( attrs , &quot;extended&quot; , :unsupported ) # returns input if type not supported &quot;true&quot; iex&gt; Validate . cast ( attrs , &quot;post_count&quot; , :integer , required : true ) ** (EpochtalkServerWeb.CustomErrors.InvalidPayload) Invalid payload, key &#39;post_count&#39; should be of type &#39;integer&#39;","ref":"EpochtalkServerWeb.Helpers.Validate.html#cast/4","title":"EpochtalkServerWeb.Helpers.Validate.cast/4","type":"function"},{"doc":"Helper used to validate and cast request parameters. Takes in a String.t() and casts it to the specified type. Will raise an EpochtalkServerWeb.CustomErrors.InvalidPayload exception if string does not pass validation and casting. Valid Types type supported options :integer :required , :key , :min , :max :boolean :required , :key Valid Options option description :key reference name of the value attempting to be cast :required true will raise an exception if casting nil :min min of value being cast to :integer :max max of value being cast to :integer Example iex&gt; alias EpochtalkServerWeb.Helpers.Validate iex&gt; Validate . cast_str ( &quot;15&quot; , :integer , key : &quot;page&quot; , min : 1 , max : 99 , required : true ) 15 iex&gt; Validate . cast_str ( nil , :integer , key : &quot;limit&quot; , min : 1 ) nil iex&gt; Validate . cast_str ( &quot;false&quot; , :boolean ) false iex&gt; Validate . cast_str ( &quot;true&quot; , :unsupported ) # returns input if type not supported &quot;true&quot; iex&gt; Validate . cast_str ( nil , :integer , key : &quot;post_count&quot; , required : true ) ** (EpochtalkServerWeb.CustomErrors.InvalidPayload) Invalid payload, key &#39;post_count&#39; should be of type &#39;integer&#39;","ref":"EpochtalkServerWeb.Helpers.Validate.html#cast_str/3","title":"EpochtalkServerWeb.Helpers.Validate.cast_str/3","type":"function"},{"doc":"Controller For Mention related API requests","ref":"EpochtalkServerWeb.MentionController.html","title":"EpochtalkServerWeb.MentionController","type":"module"},{"doc":"Used to page Mention models for a specific User","ref":"EpochtalkServerWeb.MentionController.html#page/2","title":"EpochtalkServerWeb.MentionController.page/2","type":"function"},{"doc":"Renders and formats User data, in JSON format for frontend","ref":"EpochtalkServerWeb.MentionView.html","title":"EpochtalkServerWeb.MentionView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"EpochtalkServerWeb.MentionView.html#__resource__/0","title":"EpochtalkServerWeb.MentionView.__resource__/0","type":"function"},{"doc":"Renders paginated User mentions. If extended is true returns additional Board and Post details.","ref":"EpochtalkServerWeb.MentionView.html#render/2","title":"EpochtalkServerWeb.MentionView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"EpochtalkServerWeb.MentionView.html#template_not_found/2","title":"EpochtalkServerWeb.MentionView.template_not_found/2","type":"function"},{"doc":"Controller For Notification related API requests","ref":"EpochtalkServerWeb.NotificationController.html","title":"EpochtalkServerWeb.NotificationController","type":"module"},{"doc":"Used to retrieve Notification counts for a specific User","ref":"EpochtalkServerWeb.NotificationController.html#counts/2","title":"EpochtalkServerWeb.NotificationController.counts/2","type":"function"},{"doc":"Used to dismiss Notification counts for a specific User","ref":"EpochtalkServerWeb.NotificationController.html#dismiss/2","title":"EpochtalkServerWeb.NotificationController.dismiss/2","type":"function"},{"doc":"Renders and formats User data, in JSON format for frontend","ref":"EpochtalkServerWeb.NotificationView.html","title":"EpochtalkServerWeb.NotificationView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"EpochtalkServerWeb.NotificationView.html#__resource__/0","title":"EpochtalkServerWeb.NotificationView.__resource__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"EpochtalkServerWeb.NotificationView.html#render/2","title":"EpochtalkServerWeb.NotificationView.render/2","type":"function"},{"doc":"Renders whatever data it is passed when template not found. Data pass through for rendering misc responses (ex: {found: true} or {success: true}) Example iex&gt; EpochtalkServerWeb.NotificationView . render ( &quot;DoesNotExist.json&quot; , data : %{ anything : &quot;abc&quot; } ) %{ anything : &quot;abc&quot; } iex&gt; EpochtalkServerWeb.NotificationView . render ( &quot;DoesNotExist.json&quot; , data : %{ success : true } ) %{ success : true }","ref":"EpochtalkServerWeb.NotificationView.html#template_not_found/2","title":"EpochtalkServerWeb.NotificationView.template_not_found/2","type":"function"},{"doc":"Plug that pre-parses request body and raises errors if there are problems","ref":"EpochtalkServerWeb.Plugs.PrepareParse.html","title":"EpochtalkServerWeb.Plugs.PrepareParse","type":"module"},{"doc":"Pre-parses request body and checks for errors with payload. (ex: Malformed JSON or Payload too large)","ref":"EpochtalkServerWeb.Plugs.PrepareParse.html#call/2","title":"EpochtalkServerWeb.Plugs.PrepareParse.call/2","type":"function"},{"doc":"default Plug init function","ref":"EpochtalkServerWeb.Plugs.PrepareParse.html#init/1","title":"EpochtalkServerWeb.Plugs.PrepareParse.init/1","type":"function"},{"doc":"Controller For Preference related API requests","ref":"EpochtalkServerWeb.PreferenceController.html","title":"EpochtalkServerWeb.PreferenceController","type":"module"},{"doc":"Used to retrieve preferences of a specific User","ref":"EpochtalkServerWeb.PreferenceController.html#preferences/2","title":"EpochtalkServerWeb.PreferenceController.preferences/2","type":"function"},{"doc":"Renders and formats Preference data, in JSON format for frontend","ref":"EpochtalkServerWeb.PreferenceView.html","title":"EpochtalkServerWeb.PreferenceView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"EpochtalkServerWeb.PreferenceView.html#__resource__/0","title":"EpochtalkServerWeb.PreferenceView.__resource__/0","type":"function"},{"doc":"Renders formatted JSON response for user preferences. Example iex&gt; EpochtalkServerWeb.PreferenceView.render(&quot;preferences.json&quot;, %{preferences: nil}) %{ posts_per_page : 25 , threads_per_page : 25 , collapsed_categories : [ ] , ignored_boards : [ ] , timezone_offset : &quot;&quot; , notify_replied_threads : true , ignore_newbies : false , patroller_view : false , email_mentions : true , email_messages : true } iex&gt; preferences = %{ iex&gt; posts_per_page: 25, iex&gt; threads_per_page: 25, iex&gt; collapsed_categories: %{&quot;cats&quot; =&gt; []}, iex&gt; ignored_boards: %{&quot;boards&quot; =&gt; []}, iex&gt; timezone_offset: &quot;&quot;, iex&gt; notify_replied_threads: true, iex&gt; ignore_newbies: false, iex&gt; patroller_view: false, iex&gt; email_mentions: true, iex&gt; email_messages: true iex&gt; } iex&gt; EpochtalkServerWeb.PreferenceView.render(&quot;preferences.json&quot;, %{preferences: preferences})","ref":"EpochtalkServerWeb.PreferenceView.html#render/2","title":"EpochtalkServerWeb.PreferenceView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"EpochtalkServerWeb.PreferenceView.html#template_not_found/2","title":"EpochtalkServerWeb.PreferenceView.template_not_found/2","type":"function"},{"doc":"This module is used to track User presence in websocket channels. Currently used by the user:public channel to check if a User is online.","ref":"EpochtalkServerWeb.Presence.html","title":"EpochtalkServerWeb.Presence","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.Presence.html#child_spec/1","title":"EpochtalkServerWeb.Presence.child_spec/1","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.fetch/2 .","ref":"EpochtalkServerWeb.Presence.html#fetch/2","title":"EpochtalkServerWeb.Presence.fetch/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Presence.html#fetchers_pids/0","title":"EpochtalkServerWeb.Presence.fetchers_pids/0","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.get_by_key/2 .","ref":"EpochtalkServerWeb.Presence.html#get_by_key/2","title":"EpochtalkServerWeb.Presence.get_by_key/2","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.list/1 .","ref":"EpochtalkServerWeb.Presence.html#list/1","title":"EpochtalkServerWeb.Presence.list/1","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.track/3 .","ref":"EpochtalkServerWeb.Presence.html#track/3","title":"EpochtalkServerWeb.Presence.track/3","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.track/4 .","ref":"EpochtalkServerWeb.Presence.html#track/4","title":"EpochtalkServerWeb.Presence.track/4","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.untrack/2 .","ref":"EpochtalkServerWeb.Presence.html#untrack/2","title":"EpochtalkServerWeb.Presence.untrack/2","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.untrack/3 .","ref":"EpochtalkServerWeb.Presence.html#untrack/3","title":"EpochtalkServerWeb.Presence.untrack/3","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.update/3 .","ref":"EpochtalkServerWeb.Presence.html#update/3","title":"EpochtalkServerWeb.Presence.update/3","type":"function"},{"doc":"Callback implementation for Phoenix.Presence.update/4 .","ref":"EpochtalkServerWeb.Presence.html#update/4","title":"EpochtalkServerWeb.Presence.update/4","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.html","title":"EpochtalkServerWeb.Router","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.Router.html#api/2","title":"EpochtalkServerWeb.Router.api/2","type":"function"},{"doc":"Callback invoked by Plug on every request.","ref":"EpochtalkServerWeb.Router.html#call/2","title":"EpochtalkServerWeb.Router.call/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.html#enforce_auth/2","title":"EpochtalkServerWeb.Router.enforce_auth/2","type":"function"},{"doc":"Callback required by Plug that initializes the router for serving web requests.","ref":"EpochtalkServerWeb.Router.html#init/1","title":"EpochtalkServerWeb.Router.init/1","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.html#maybe_auth/2","title":"EpochtalkServerWeb.Router.maybe_auth/2","type":"function"},{"doc":"Module with named helpers generated from EpochtalkServerWeb.Router.","ref":"EpochtalkServerWeb.Router.Helpers.html","title":"EpochtalkServerWeb.Router.Helpers","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#configuration_path/2","title":"EpochtalkServerWeb.Router.Helpers.configuration_path/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#configuration_path/3","title":"EpochtalkServerWeb.Router.Helpers.configuration_path/3","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#configuration_url/2","title":"EpochtalkServerWeb.Router.Helpers.configuration_url/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#configuration_url/3","title":"EpochtalkServerWeb.Router.Helpers.configuration_url/3","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#mention_path/2","title":"EpochtalkServerWeb.Router.Helpers.mention_path/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#mention_path/3","title":"EpochtalkServerWeb.Router.Helpers.mention_path/3","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#mention_url/2","title":"EpochtalkServerWeb.Router.Helpers.mention_url/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#mention_url/3","title":"EpochtalkServerWeb.Router.Helpers.mention_url/3","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#notification_path/2","title":"EpochtalkServerWeb.Router.Helpers.notification_path/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#notification_path/3","title":"EpochtalkServerWeb.Router.Helpers.notification_path/3","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#notification_url/2","title":"EpochtalkServerWeb.Router.Helpers.notification_url/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#notification_url/3","title":"EpochtalkServerWeb.Router.Helpers.notification_url/3","type":"function"},{"doc":"Generates the path information including any necessary prefix.","ref":"EpochtalkServerWeb.Router.Helpers.html#path/2","title":"EpochtalkServerWeb.Router.Helpers.path/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#preference_path/2","title":"EpochtalkServerWeb.Router.Helpers.preference_path/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#preference_path/3","title":"EpochtalkServerWeb.Router.Helpers.preference_path/3","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#preference_url/2","title":"EpochtalkServerWeb.Router.Helpers.preference_url/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#preference_url/3","title":"EpochtalkServerWeb.Router.Helpers.preference_url/3","type":"function"},{"doc":"Generates an integrity hash to a static asset given its file path.","ref":"EpochtalkServerWeb.Router.Helpers.html#static_integrity/2","title":"EpochtalkServerWeb.Router.Helpers.static_integrity/2","type":"function"},{"doc":"Generates path to a static asset given its file path.","ref":"EpochtalkServerWeb.Router.Helpers.html#static_path/2","title":"EpochtalkServerWeb.Router.Helpers.static_path/2","type":"function"},{"doc":"Generates url to a static asset given its file path.","ref":"EpochtalkServerWeb.Router.Helpers.html#static_url/2","title":"EpochtalkServerWeb.Router.Helpers.static_url/2","type":"function"},{"doc":"Generates the connection/endpoint base URL without any path information.","ref":"EpochtalkServerWeb.Router.Helpers.html#url/1","title":"EpochtalkServerWeb.Router.Helpers.url/1","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#user_path/2","title":"EpochtalkServerWeb.Router.Helpers.user_path/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#user_path/3","title":"EpochtalkServerWeb.Router.Helpers.user_path/3","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#user_path/4","title":"EpochtalkServerWeb.Router.Helpers.user_path/4","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#user_url/2","title":"EpochtalkServerWeb.Router.Helpers.user_url/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#user_url/3","title":"EpochtalkServerWeb.Router.Helpers.user_url/3","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.Router.Helpers.html#user_url/4","title":"EpochtalkServerWeb.Router.Helpers.user_url/4","type":"function"},{"doc":"Description of all events occuring in application","ref":"EpochtalkServerWeb.Telemetry.html","title":"EpochtalkServerWeb.Telemetry","type":"module"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"EpochtalkServerWeb.Telemetry.html#child_spec/1","title":"EpochtalkServerWeb.Telemetry.child_spec/1","type":"function"},{"doc":"Handles User websocket channels. These channels are used to broadcast events to the client. With the current design, API route can broadcast messages when an action is performed, this notifies the client to perform an action, such as requesting data from the server. TODO(akinsey): This is a direct port of the old epochtalk websocket architecture, there is room for improvement. For certain messages (ex: announcement) relevant data can be sent over the channel via the broadcast message payload. Currently, receiving a message triggers the client to manually make an api request for the updated data. Supported User Channels channel⠀⠀⠀⠀⠀⠀ authed purpose user:public maybe All logged in and anonymous users are connected to this channel. Used to track user's online status and to broadcast MOTD announcements. user:&lt;user_id&gt; yes Used to broadcast changes that affect a particular user (ex: logout) user:role yes Used to broadcast when a role has its permissions changed Client Handled Messages (messages broadcast from server) broadcast message channel⠀⠀⠀⠀⠀⠀ payload⠀⠀⠀⠀⠀⠀ client action announcement user:public %{} fetches MOTD announcement reauthenticate user:&lt;user_id&gt; %{} reauthenticates, fetches user changes logout user:&lt;user_id&gt; %{:token} logout all user sessions with token newMessage user:&lt;user_id&gt; %{} fetches new messages/counts refreshMentions user:&lt;user_id&gt; %{} fetches new mentions/counts permissionsChanged user:role %{} reauthenticates, fetches new permissions Server Handled Messages (messages broadcast from client) broadcast message channel payload⠀⠀⠀⠀⠀⠀ server action is_online user:public %{:user_id} replies to client with the specified user's online status","ref":"EpochtalkServerWeb.UserChannel.html","title":"EpochtalkServerWeb.UserChannel","type":"module"},{"doc":"","ref":"EpochtalkServerWeb.UserChannel.html#child_spec/1","title":"EpochtalkServerWeb.UserChannel.child_spec/1","type":"function"},{"doc":"Handles message is_online , checks user:public channel to see if User with user_id is connected using Presence. Returns user_id and online , a boolean indicating if the User is connected.","ref":"EpochtalkServerWeb.UserChannel.html#is_online/2","title":"EpochtalkServerWeb.UserChannel.is_online/2","type":"function"},{"doc":"Handles joining of user:public channel. Message is broadcast on this channel when a MOTD is updated, this tells the client to fetch the MOTD.","ref":"EpochtalkServerWeb.UserChannel.html#join_public_channel/1","title":"EpochtalkServerWeb.UserChannel.join_public_channel/1","type":"function"},{"doc":"Handles joining of user:role channel. Messages are broadcast on this channel when a roles are updated, which tell the client to reauthenticate inorder to fetch new roles. Messages contain the lookup of the updated role, the client will check the user's roles for the role lookup and reauthenticate if necessary.","ref":"EpochtalkServerWeb.UserChannel.html#join_role_channel/1","title":"EpochtalkServerWeb.UserChannel.join_role_channel/1","type":"function"},{"doc":"Handles joining of user:&lt;user_id&gt; channel, enforces that user is authenticated. This channel is used to broadcast events such as reauthenticate or logout to a specific User with matching user_id .","ref":"EpochtalkServerWeb.UserChannel.html#join_user_channel/2","title":"EpochtalkServerWeb.UserChannel.join_user_channel/2","type":"function"},{"doc":"","ref":"EpochtalkServerWeb.UserChannel.html#start_link/1","title":"EpochtalkServerWeb.UserChannel.start_link/1","type":"function"},{"doc":"Tracks a User that joins a channel using Presence . Currently used to track a User that joins the user:public channel. Used by forum order to keep track of online users.","ref":"EpochtalkServerWeb.UserChannel.html#track_user_online/1","title":"EpochtalkServerWeb.UserChannel.track_user_online/1","type":"function"},{"doc":"Controller For User related API requests","ref":"EpochtalkServerWeb.UserController.html","title":"EpochtalkServerWeb.UserController","type":"module"},{"doc":"Authenticates currently logged in User","ref":"EpochtalkServerWeb.UserController.html#authenticate/2","title":"EpochtalkServerWeb.UserController.authenticate/2","type":"function"},{"doc":"Confirms a newly registered User . Used when :epochtalk_server[:frontend_config][&quot;verify_registration&quot;] configuration is set to true","ref":"EpochtalkServerWeb.UserController.html#confirm/2","title":"EpochtalkServerWeb.UserController.confirm/2","type":"function"},{"doc":"Used to check if an email has already been taken","ref":"EpochtalkServerWeb.UserController.html#email/2","title":"EpochtalkServerWeb.UserController.email/2","type":"function"},{"doc":"Logs in an existing User","ref":"EpochtalkServerWeb.UserController.html#login/2","title":"EpochtalkServerWeb.UserController.login/2","type":"function"},{"doc":"Logs out the logged in User TODO(boka): check if user is on page that requires auth TODO(boka): Delete users session","ref":"EpochtalkServerWeb.UserController.html#logout/2","title":"EpochtalkServerWeb.UserController.logout/2","type":"function"},{"doc":"Registers a new User","ref":"EpochtalkServerWeb.UserController.html#register/2","title":"EpochtalkServerWeb.UserController.register/2","type":"function"},{"doc":"Used to check if a username has already been taken","ref":"EpochtalkServerWeb.UserController.html#username/2","title":"EpochtalkServerWeb.UserController.username/2","type":"function"},{"doc":"Handles User socket connection and authentication.","ref":"EpochtalkServerWeb.UserSocket.html","title":"EpochtalkServerWeb.UserSocket","type":"module"},{"doc":"Connects to socket and authenticates if token is provided, otherwise connects anonymously.","ref":"EpochtalkServerWeb.UserSocket.html#connect_maybe_auth/3","title":"EpochtalkServerWeb.UserSocket.connect_maybe_auth/3","type":"function"},{"doc":"Returns socket id &quot;user:&lt;user_id&gt;&quot; if authenticated and nil if not authenticated.","ref":"EpochtalkServerWeb.UserSocket.html#maybe_socket_id/1","title":"EpochtalkServerWeb.UserSocket.maybe_socket_id/1","type":"function"},{"doc":"Renders and formats User data, in JSON format for frontend","ref":"EpochtalkServerWeb.UserView.html","title":"EpochtalkServerWeb.UserView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"EpochtalkServerWeb.UserView.html#__resource__/0","title":"EpochtalkServerWeb.UserView.__resource__/0","type":"function"},{"doc":"Renders formatted JSON response for registration confirmation. Example iex&gt; EpochtalkServerWeb.UserView.render(&quot;register_with_verify.json&quot;, %{user: %User{ username: &quot;Test&quot; }}) %{ username : &quot;Test&quot; , confirm_token : true , message : &quot;Successfully registered, please confirm account to login.&quot; }","ref":"EpochtalkServerWeb.UserView.html#render/2","title":"EpochtalkServerWeb.UserView.render/2","type":"function"},{"doc":"Renders whatever data it is passed when template not found. Data pass through for rendering misc responses (ex: {found: true} or {success: true}) Example iex&gt; EpochtalkServerWeb.UserView . render ( &quot;DoesNotExist.json&quot; , data : %{ found : true } ) %{ found : true } iex&gt; EpochtalkServerWeb.UserView . render ( &quot;DoesNotExist.json&quot; , data : %{ success : true } ) %{ success : true }","ref":"EpochtalkServerWeb.UserView.html#template_not_found/2","title":"EpochtalkServerWeb.UserView.template_not_found/2","type":"function"},{"doc":"Exception raised when api request payload is incorrect","ref":"EpochtalkServerWeb.CustomErrors.InvalidPayload.html","title":"EpochtalkServerWeb.CustomErrors.InvalidPayload","type":"exception"},{"doc":"Exception raised when api request payload JSON is malformed","ref":"EpochtalkServerWeb.CustomErrors.MalformedPayload.html","title":"EpochtalkServerWeb.CustomErrors.MalformedPayload","type":"exception"},{"doc":"Exception raised when api request payload is too large","ref":"EpochtalkServerWeb.CustomErrors.OversizedPayload.html","title":"EpochtalkServerWeb.CustomErrors.OversizedPayload","type":"exception"}]